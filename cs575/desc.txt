Projects 1 and 2:  First read this definition of the new XML-- language.  Also download these example XML-- input files and compare to the definition of XML--.  XML-- is a subset of the well-known XML language (see brief intro or full specs for XML).  Both projects 1 and 2 implement a parser for the XML-- language.  Each parser calls a scanner which groups the individual characters of the input stream into tokens, and discards comments and whitespace.  Essentially the scanner simulates a deterministic finite-state machine that has a different final state for recognizing each kind of token.  Next the parser checks whether the sequence of tokens produced by the scanner can be generated from the given XML-- grammar.  Essentially the parser simulates a deterministic pushdown automaton that is equivalent to the grammar.  Project 1 implements a top-down (or recursive descent) parser, and it outputs a leftmost derivation.  Project 2 implements a bottom-up (or shift-reduce) parser, and it outputs a rightmost derivation in reverse order.  You may transform the given XML-- grammar as needed to adapt it for each kind of parser, for example into LL(1) for project 1 and into SLR(1) or LALR(1) or LR(1) for project 2.  Each parser outputs a derivation with one grammar rule displayed per line, and the derivation corresponds to a parse tree that generates the given input token sequence.  If the input contains any error, your program should print an appropriate error message.  For additional information about scanning and parsing, please refer to Chapters 3 and 4 of the dragon book.

Project 3:  The Bounded Post's Correspondence Problem (BPCP) has inputs which are a list of pairs of strings [X1,Y1], [X2,Y2], ..., [Xn,Yn] and also an integer k.  The BPCP asks the same question as the PCP, but with an additional restriction that the matching solution must be formed by concatenating at most k pairs of strings.  Example: Consider [a,abbb], [bb,b].  If k>=4 then the BPCP solution is 1,2,2,2 because (a)(bb)(bb)(bb) = (abbb)(b)(b)(b), but if k<=3 then no solution exists.  Implement a program that produces a solution to the BPCP if a solution exists, and otherwise it reports that no solution exists.  Your program should search for a solution as efficiently as possible.
